#!/bin/bash
set -eu

print_usage() {
  cat <<EOF
usage: ${0##*/} [<option(s)>]
chdir with file-manager.

options:
  -w, --wrapper=<shell>  output the wrapper script for the shell and exit
      --help             print usage and exit

supported-shells:
  sh, bash, zsh

keys:
  +       toggle show hidden files (default: OFF)
  -       chdir to the parent directory in file-manager
  <CR>    chdir to the directory in file-manager
  <C-g>   quit file-manager and chdir to the last directory
  q       quit file-manager
EOF
}

print_app_script() {
  cat <<'EOF'
" appscript:start
let b:app = {}

function! b:app.start() abort
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal nomodifiable
  setlocal noswapfile
  setlocal nowrap

  highlight EndOfBuffer ctermfg=0
  highlight AppCwd ctermfg=green
  highlight AppDirectory ctermfg=blue
  syntax match AppCwd /^\/.*$/
  syntax match AppDirectory /^.\+\/$/
  nnoremap <buffer><silent> +     :<C-u>call b:app.toggle_show_hidden()<CR>
  nnoremap <buffer><silent> -     :<C-u>call b:app.up_directory()<CR>
  nnoremap <buffer><silent> <CR>  :<C-u>call b:app.move_directory()<CR>
  nnoremap <buffer><silent> <C-g> :<C-u>call b:app.save_directory_and_exit()<CR>
  nnoremap <buffer><silent> q     :<C-u>call b:app.exit()<CR>

  let self.show_hidden_files = 0
  let self.cwd               = getcwd()
  let self.stdout            = $STDOUT
  call self.update_screen()
endfunction

function! b:app.toggle_show_hidden() abort
  let self.show_hidden_files = !self.show_hidden_files
  call self.update_screen()
endfunction

function! b:app.up_directory() abort
  let self.cwd = fnamemodify(self.cwd, ':h')
  call self.update_screen()
endfunction

function! b:app.move_directory() abort
  let file = substitute(getline('.'), '/$', '', '')
  let path = fnamemodify((self.cwd ==# '/' ? '/' : self.cwd . '/') . file, ':p:h')
  if isdirectory(path)
    let self.cwd = path
    call self.update_screen()
  endif
endfunction

function! b:app.save_directory_and_exit() abort
  if filewritable(self.stdout)
    call writefile([self.cwd], self.stdout)
  endif
  exit
endfunction

function! b:app.update_screen() abort
  setlocal modifiable
  silent execute '%delete'
  let files = s:readdir_with_indicator(self.cwd, self.show_hidden_files)
  let lines = [self.cwd, ''] + files
  call setline(1, lines)
  call cursor(3, 1)
  setlocal nomodifiable
endfunction

function! b:app.exit() abort
  quit!
endfunction

function! s:readdir_with_indicator(path, show_hidden_files) abort
  let files = map(filter(split(glob(a:path . '/.*'), "\n"), 'v:val !~# "/.$" && v:val !~# "/..$"') + split(glob(a:path . '/*'), "\n"), 'v:val[len(a:path)+1:]')
  if !a:show_hidden_files
    let files = filter(files, 'v:val !~# "^\\."')
  endif
  let files = map(files, 'isdirectory(a:path . "/" . v:val) ? v:val . "/" : v:val')
  let files = sort(files, function('s:compare_files_with_indicator'))
  return files
endfunction

function! s:compare_files_with_indicator(lhs, rhs) abort
  if a:lhs[-1:] ==# '/' && a:rhs[-1:] !=# '/'
    return -1
  elseif a:lhs[-1:] !=# '/' && a:rhs[-1:] ==# '/'
    return 1
  endif
  if a:lhs < a:rhs
    return -1
  elseif a:lhs > a:rhs
    return 1
  endif
  return 0
endfunction

call b:app.start()
" appscript:end
EOF
}

print_wrapper_script_for_sh() {
  cat <<'EOF'
ad() {
  set -- "$(command ad "$@")"
  if [ -d "$1" ]; then
    cd "$1" || return 1
  elif [ -n "$1" ]; then
    printf "%s\n" "$1"
  fi
}
EOF
}

print_wrapper_script_for_bash() {
  print_wrapper_script_for_sh
  cat <<'EOF'

_ad() {
  local cur prev words cword split
  _init_completion -s || return

  local options=(
    --wrapper=
    --help
  )
  local wrapper_target_shells=(
    sh
    bash
    zsh
  )

  case $prev in
    -w|--wrapper)
      COMPREPLY=( $(compgen -W '"${wrapper_target_shells[@]}"' -- "$cur") )
      return
      ;;
  esac
  $split && return

  case $cur in
    -*)
      COMPREPLY=( $(compgen -W '"${options[@]}"' -- "$cur") )
      [[ ${COMPREPLY[0]} == *= ]] && compopt -o nospace
      ;;
    *)
      _filedir
      ;;
  esac
}

complete -F _ad ad
EOF
}

print_wrapper_script_for_zsh() {
  print_wrapper_script_for_sh
  cat <<'EOF'

_ad() {
  _arguments \
    '(-w --wrapper)'{-w,--wrapper}'[output the wrapper script for the shell and exit]: :_values '"'"'target shell'"'"' sh bash zsh' \
    '(- *)--help[print usage and exit]' \
    && return 0
}

compdef _ad ad
EOF
}

print_wrapper_script() {
  case $1 in
    sh)
      print_wrapper_script_for_sh
      ;;
    bash)
      print_wrapper_script_for_bash
      ;;
    zsh)
      print_wrapper_script_for_zsh
      ;;
    *)
      printf "%s\n" "${0##*/}: unsupported shell '$1'" >&2
      exit 1
      ;;
  esac
}

opt_wrapper=
opt_help=false
while [[ $# -ge 1 ]]; do
  case $1 in
    -w*|--wrapper|--wrapper=*)
      case $1 in
        -w|--wrapper)
          if [[ $# -lt 2 ]]; then
            printf "%s\n" "${0##*/}: option requires an argument -- '${1##*-}'" >&2
            exit 1
          fi
          opt_wrapper=$2
          shift
          ;;
        -w*)
          opt_wrapper=${1#-w}
          ;;
        --wrapper=*)
          opt_wrapper=${1#--wrapper=}
          ;;
      esac
      case $opt_wrapper in
        sh|bash|zsh)
          ;;
        *)
          printf "%s\n" "${0##*/}: unsupported shell '$opt_wrapper'" >&2
          exit 1
          ;;
      esac
      ;;
    --help)
      opt_help=true
      ;;
    --)
      shift
      break
      ;;
    -*)
      printf "%s\n" "${0##*/}: unrecognized option '$1'" >&2
      exit 1
      ;;
    *)
      break
      ;;
  esac
  shift
done

if [[ $opt_help = true ]]; then
  print_usage
  exit 0
fi
if [[ -n $opt_wrapper ]]; then
  print_wrapper_script "$opt_wrapper"
  exit 0
fi

cat <(STDOUT=>(cat) vim -u NONE -N -n -i NONE -S <(print_app_script) < /dev/tty > /dev/tty)
