#!/bin/bash
set -eu

print_usage() {
  cat <<EOF
usage:
  ${0##*/}
  ${0##*/} -w|--wrapper <SHELL>
  ${0##*/} --help
chdir with file-manager.

options:
  -w, --wrapper=SHELL  output wrapper script for SHELL and exit
      --help           print usage and exit

supported-shells:
  sh, ksh, bash, zsh, yash, fish, tcsh

keys:
  +       toggle show hidden files (default: OFF)
  -       chdir to the parent directory in file-manager
  <CR>    chdir to the directory in file-manager
  <C-g>   quit file-manager and chdir to the last directory
  q       quit file-manager
EOF
}

print_appscript() {
  cat <<'EOF'
" appscript:start
let b:app = {}

function! b:app.start() abort
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal nomodifiable
  setlocal noswapfile
  setlocal nowrap

  highlight EndOfBuffer ctermfg=0
  highlight AppCwd ctermfg=green
  highlight AppDirectory ctermfg=blue
  syntax match AppCwd /^\/.*$/
  syntax match AppDirectory /^.\+\/$/
  nnoremap <buffer><silent> +     :<C-u>call b:app.toggle_show_hidden()<CR>
  nnoremap <buffer><silent> -     :<C-u>call b:app.up_directory()<CR>
  nnoremap <buffer><silent> <CR>  :<C-u>call b:app.move_directory()<CR>
  nnoremap <buffer><silent> <C-g> :<C-u>call b:app.save_directory_and_exit()<CR>
  nnoremap <buffer><silent> q     :<C-u>call b:app.exit()<CR>

  let self.show_hidden_files = 0
  let self.cwd               = getcwd()
  let self.stdout            = $STDOUT
  call self.update_screen()
endfunction

function! b:app.toggle_show_hidden() abort
  let self.show_hidden_files = !self.show_hidden_files
  call self.update_screen()
endfunction

function! b:app.up_directory() abort
  let self.cwd = fnamemodify(self.cwd, ':h')
  call self.update_screen()
endfunction

function! b:app.move_directory() abort
  let file = substitute(getline('.'), '/$', '', '')
  let path = fnamemodify((self.cwd ==# '/' ? '/' : self.cwd . '/') . file, ':p:h')
  if isdirectory(path)
    let self.cwd = path
    call self.update_screen()
  endif
endfunction

function! b:app.save_directory_and_exit() abort
  if filewritable(self.stdout)
    call writefile([self.cwd], self.stdout)
  endif
  exit
endfunction

function! b:app.update_screen() abort
  setlocal modifiable
  silent execute '%delete'
  let files = s:readdir_with_indicator(self.cwd, self.show_hidden_files)
  let lines = [self.cwd, ''] + files
  call setline(1, lines)
  call cursor(3, 1)
  setlocal nomodifiable
endfunction

function! b:app.exit() abort
  quit!
endfunction

function! s:readdir_with_indicator(path, show_hidden_files) abort
  let files = map(filter(split(glob(a:path . '/.*'), "\n"), 'v:val !~# "/.$" && v:val !~# "/..$"') + split(glob(a:path . '/*'), "\n"), 'v:val[len(a:path)+1:]')
  if !a:show_hidden_files
    let files = filter(files, 'v:val !~# "^\\."')
  endif
  let files = map(files, 'isdirectory(a:path . "/" . v:val) ? v:val . "/" : v:val')
  let files = sort(files, function('s:compare_files_with_indicator'))
  return files
endfunction

function! s:compare_files_with_indicator(lhs, rhs) abort
  if a:lhs[-1:] ==# '/' && a:rhs[-1:] !=# '/'
    return -1
  elseif a:lhs[-1:] !=# '/' && a:rhs[-1:] ==# '/'
    return 1
  endif
  if a:lhs < a:rhs
    return -1
  elseif a:lhs > a:rhs
    return 1
  endif
  return 0
endfunction

call b:app.start()
" appscript:end
EOF
}

print_wrapper_script() {
  local shell=$1
  case $shell in
    sh|ksh|bash|zsh|yash)
      cat <<'      EOF' | sed 's/^ \{6\}//'
      ad() {
        if [ "$#" -ge 1 ]; then
          command -- ad "$@"
          return
        fi
        set -- "$(command -- ad "$@")"
        if [ -n "$1" ]; then
          cd "$1" || return
        fi
      }
      EOF
      ;;
    fish)
      cat <<'      EOF' | sed 's/^ \{6\}//'
      function ad
        if test (count $argv) -ge 1
          command -- ad $argv
          return
        end
        set -l nextpath (command ad)
        if test -n "$nextpath"
          cd $nextpath
        end
      end
      EOF
      ;;
    tcsh)
      cat <<'      EOF' | sed 's/^ \{6\}//'
      alias ad '\\
      set __fn_argv=(\!:*);\\
      eval '"'"'\\
      source /dev/stdin $__fn_argv:q <<__FN_BODY__\\
        unset __fn_argv\\
        if (\$#argv >= 1) then\\
          \\ad \$*\\
          exit\\
        endif\\
        set __adnextpath=\`\\ad\`\\
        if (\$__adnextpath:q \\!= '"'"'"'"'"'"'"'"''"'"'"'"'"'"'"'"') then\\
          cd \$__adnextpath:q\\
        endif\\
        unset __adnextpath\\
      __FN_BODY__\\
      '"'"'\\
      '
      true
      EOF
      ;;
  esac
}

wrapper_target_shell=
while [[ $# -ge 1 ]]; do
  case $1 in
    -w|-w*|--wrapper|--wrapper=*)
      case $1 in
        -w|--wrapper)
          if [[ $# -lt 2 ]]; then
            printf "%s\n" "${0##*/}: option requires an argument -- '${1##*-}'" >&2
            exit 1
          fi
          wrapper_target_shell=$2
          shift
          ;;
        -w*)
          wrapper_target_shell=${1#-w}
          ;;
        --wrapper=*)
          wrapper_target_shell=${1#--wrapper=}
          ;;
      esac
      case $wrapper_target_shell in
        sh|ksh|bash|zsh|yash|fish|tcsh)
          ;;
        *)
          printf "%s\n" "${0##*/}: unsupported shell '$wrapper_target_shell'" >&2
          exit 1
          ;;
      esac
      ;;
    --help)
      print_usage
      exit 0
      ;;
    --)
      shift
      break
      ;;
    -*)
      printf "%s\n" "${0##*/}: unrecognized option '$1'" >&2
      exit 1
      ;;
    *)
      break
      ;;
  esac
  shift
done

if [[ -n $wrapper_target_shell ]]; then
  print_wrapper_script "$wrapper_target_shell"
  exit 0
fi
cat <(STDOUT=>(cat) vim -u NONE -N -n -i NONE -S <(print_appscript) < /dev/tty > /dev/tty)
